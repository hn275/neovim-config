
# TYPESCRIPT CUSTOM SNIPPETS

# extends file extension
extends typescript, typescriptreact

#### HOOKS ####
# useState
snippet tuseS "Typescript React.useState" b
const [${1:/* state */}, set`!p snip.rv=t[1].capitalize()`] = useState<${2:/* type */}>(${3:/* initialState */});
endsnippet

# useEffect
snippet tuseE "Typescript React.useEffect" b
useEffect(() => {
	${1:// code}
	return ${2:// cleanup}
}, [${3:/* dependencies */}])
endsnippet

#### Functions ####
global !p
import re
# get file name
def file_name():
	file_name= snip.fn
	return re.match("\w*", file_name).group().capitalize()

#get tag name
def tag_name(arg1):
	tag_name = arg1 
	if tag_name:
		return re.findall("[a-z]\S*", tag_name)[0]
	else:
		return ""
endglobal

#### Functional Components ####

# function components default export
snippet tfce "TypeScript functional component" b
import React from 'react';

interface `!p snip.rv=file_name()`Props {
	${1:/* prop */}: ${2:/* prop type */};
}

const `!p snip.rv=file_name()`: React.FC<`!p snip.rv=file_name()`Props> = ({ ${3:/* props */} }): JSX.Element => {

	return (
		<></>
	);
};

export default `!p snip.rv=file_name()`;
endsnippet

#### TAGS ####
# get tag name function 
snippet tag "HTML tags"
<${1}>
	${2:{/* content */}}
</`!p snip.rv=tag_name(t[1])`>
endsnippet

#### DOC STRING ####
snippet DOC "Doc string" b
/**
	* @param {${1:type}} ${2:paramName}: ${3:param context}
	* @return {${4:type}}: ${5:return value context}
	*/
endsnippet

